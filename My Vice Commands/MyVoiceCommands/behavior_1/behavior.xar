<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="MyVoiceCommands/reachedToEndOfAppEvent" type="0" type_size="1" nature="4" stm_value_name="MyVoiceCommands/reachedToEndOfAppEvent" inner="1" tooltip="MyVoiceCommands/reachedToEndOfAppEvent desc" id="4" />
        <Input name="MyVoiceCommands/introFinished" type="0" type_size="1" nature="4" stm_value_name="MyVoiceCommands/introFinished" inner="1" tooltip="MyVoiceCommands/introFinished desc" id="5" />
        <Input name="MyVoiceCommands/sayAppNameFinished" type="0" type_size="1" nature="4" stm_value_name="MyVoiceCommands/sayAppNameFinished" inner="1" tooltip="MyVoiceCommands/sayAppNameFinished desc" id="6" />
        <Input name="MyVoiceCommands/sayVoiceCommandsFinished" type="0" type_size="1" nature="4" stm_value_name="MyVoiceCommands/sayVoiceCommandsFinished" inner="1" tooltip="MyVoiceCommands/sayVoiceCommandsFinished desc" id="7" />
        <Input name="MyVoiceCommands/sayDescriptionFinished" type="0" type_size="1" nature="4" stm_value_name="MyVoiceCommands/sayDescriptionFinished" inner="1" tooltip="MyVoiceCommands/sayDescriptionFinished desc" id="8" />
        <Input name="MyVoiceCommands/requestNextAppEvent" type="0" type_size="1" nature="4" stm_value_name="MyVoiceCommands/requestNextAppEvent" inner="1" tooltip="MyVoiceCommands/requestNextAppEvent desc" id="9" />
        <Input name="MyVoiceCommands/requestPreviousAppEvent" type="0" type_size="1" nature="4" stm_value_name="MyVoiceCommands/requestPreviousAppEvent" inner="1" tooltip="MyVoiceCommands/requestPreviousAppEvent desc" id="10" />
        <Input name="MyVoiceCommands/requestInterruptEvent" type="0" type_size="1" nature="4" stm_value_name="MyVoiceCommands/requestInterruptEvent" inner="1" tooltip="MyVoiceCommands/requestInterruptEvent desc" id="11" />
        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="MiddleTactilTouched desc" id="12" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="13" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="VoiceCommandMain" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="355" y="219">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.commandList = []
        self.index = 0
        self.resumeFun = None
        self.interrupted = False
        self.pauseForEachCommand = 800

    def onLoad(self):
        self.packageManager = ALProxy("PackageManager")
        self.memory = ALProxy("ALMemory")

        #Event Script to Dialog
        self.memory.declareEvent("MyVoiceCommands/sayIntro")
        self.memory.declareEvent("MyVoiceCommands/sayAppNameEvent")
        self.memory.declareEvent("MyVoiceCommands/sayVoiceCommands")
        self.memory.declareEvent("MyVoiceCommands/sayDescription")

        #Event Dialog to Script
        self.memory.declareEvent("MyVoiceCommands/introFinished")
        self.memory.declareEvent("MyVoiceCommands/sayAppNameFinished")
        self.memory.declareEvent("MyVoiceCommands/sayVoiceCommandsFinished")
        self.memory.declareEvent("MyVoiceCommands/sayDescriptionFinished")
        self.memory.declareEvent("MyVoiceCommands/requestNextAppEvent")
        self.memory.declareEvent("MyVoiceCommands/requestPreviousAppEvent")
        self.memory.declareEvent("MyVoiceCommands/requestInterruptEvent")
        self.memory.declareEvent("MyVoiceCommands/reachedToEndOfAppEvent")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, loc):
        if loc == "ja_JP" :
            self.pauseForEachCommand = 500

        packageList = self.packageManager.packages()
        for package in packageList:
            voiceCommand = {"desc": ""}
            for packageInfo in package:
                if packageInfo[0] == "uuid" :
                    #don't include myself to the app list
                    if packageInfo[1] == self.packageUid() :
                        break

                if packageInfo[0] == "langToName" :
                    for name in packageInfo[1]:
                        if name[0] == loc:
                            voiceCommand["name"] = name[1]
                            break

                if packageInfo[0] == "langToDesc" :
                    for desc in packageInfo[1] :
                        if desc[0] == loc:
                            voiceCommand["description"] = desc[1]
                            #self.logger.info("### description:%s : %s\n" % (desc[0], desc[1]))
                            break

                if packageInfo[0] == "behaviors" :
                    for behavior in packageInfo[1]:
                        for behaviorInfo in behavior:
                            if behaviorInfo[0] == "langToTriggerSentences":
                                for triggerSentences in behaviorInfo[1] :
                                    if triggerSentences[0] == loc :
                                        voiceCommand["sentences"] = triggerSentences[1]
                                        break

            if "sentences" in voiceCommand:
                self.commandList.append(voiceCommand)
        #debug
        if False:
            for command in self.commandList :
                self.logger.info("####################:%s" % command["description"])
                for sentence in command["sentences"]:
                    self.logger.info("command %s" % sentence)

        self.memory.insertData("MyVoiceCommands/appName", "none")
        self.memory.insertData("MyVoiceCommands/voiceCommands", "")
        self.memory.insertData("MyVoiceCommands/description", "none")
        self.memory.raiseEvent("MyVoiceCommands/sayIntroEvent",1)

        self.resumeFun = self.sayAppName

    def checkInterruption(self, f):
        self.resumeFun = f
        if self.interrupted :
           self.sayDescription()
           return True
        return False


    def sayAppName(self):

        if self.checkInterruption(self.sayAppName) :
            return

        hasAppName = False
        if self.index < len(self.commandList) :
            if "name" in self.commandList[self.index] :
                self.memory.insertData("MyVoiceCommands/appName", self.commandList[self.index].get("name"))
                hasAppName = True
            else:
                self.memory.insertData("MyVoiceCommands/appName", "none")

            voiceCommands = ""
            for c in self.commandList[self.index]["sentences"]:
                voiceCommands = voiceCommands + c + "\\pau=" + str(self.pauseForEachCommand) + "\\"

            self.memory.insertData("MyVoiceCommands/voiceCommands", voiceCommands)

            if "description" in self.commandList[self.index] :
                self.memory.insertData("MyVoiceCommands/description", self.commandList[self.index].get("description"))
            else:
                self.memory.insertData("MyVoiceCommands/description", "none")

            self.memory.raiseEvent("MyVoiceCommands/sayAppNameEvent",1)


    def sayVoiceCommands(self):
        if self.checkInterruption(self.sayVoiceCommands):
            return

        self.memory.raiseEvent("MyVoiceCommands/sayVoiceCommandsEvent",1)

    def endOfApp(self):
        if self.checkInterruption(self.endOfApp):
            return

        self.memory.raiseEvent("MyVoiceCommands/endOfAppEvent", 1)


    def sayDescription(self):
        self.interrupted = True
        self.memory.raiseEvent("MyVoiceCommands/sayDescriptionEvent",1)


    def nextApp(self):
        self.index = self.index + 1
        if self.index < len(self.commandList) :
            self.sayAppName()
        else:
            self.endOfApp()


    def previousApp(self):
        self.index = self.index - 1
        if self.index < 0:
            self.index = len(self.commandList) - 1

        self.sayAppName()

    #Event handlers
    def onInput_onIntroFinished(self):
        time.sleep(1)
        self.sayAppName()


    def onInput_onSayAppNameFinished(self):
        time.sleep(1)
        self.sayVoiceCommands()

    def onInput_onSayVoiceCommandsFinished(self):
        time.sleep(2)
        self.nextApp()

    def onInput_onSayDescriptionFinished(self):
        self.interrupted = False
        time.sleep(1)
        if self.resumeFun != None:
            self.resumeFun()

    def onInput_onNextApp(self):
        self.nextApp()


    def onInput_onPreviousApp(self):
        self.logger.info("next...")
        self.previousApp()

    def onInput_onInterrupt(self):
        self.sayDescription()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onIntroFinished" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Input name="onSayAppNameFinished" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Input name="onSayVoiceCommandsFinished" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Input name="onSayDescriptionFinished" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                            <Input name="onNextApp" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                            <Input name="onPreviousApp" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                            <Input name="onInterrupt" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="11" />
                        </Box>
                        <Box name="GetLocale" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="230" y="123">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        tts = ALProxy("ALTextToSpeech")
        self.output(tts.locale())

        pass

    def onInput_onStop(self):
        from babel import Locale

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="output" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                        </Box>
                        <Box name="SayVoiceComand" id="4" localization="8" tooltip="" x="225" y="21">
                            <dialogFile>../SayVoiceCommand/SayVoiceCommand.dlg</dialogFile>
                            <bitmap>media/images/box/box-dialog.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="13" outputowner="1" indexofoutput="11" />
                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="5" outputowner="0" indexofoutput="6" />
                        <Link inputowner="1" indexofinput="6" outputowner="0" indexofoutput="7" />
                        <Link inputowner="1" indexofinput="7" outputowner="0" indexofoutput="8" />
                        <Link inputowner="1" indexofinput="8" outputowner="0" indexofoutput="9" />
                        <Link inputowner="1" indexofinput="9" outputowner="0" indexofoutput="10" />
                        <Link inputowner="1" indexofinput="10" outputowner="0" indexofoutput="11" />
                        <Link inputowner="1" indexofinput="10" outputowner="0" indexofoutput="12" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
